import express from 'express'
import cors from 'cors'
import axios from 'axios'
import path from 'path'
import { fileURLToPath } from 'url'
import telegramConfig from './config/telegram.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const app = express()
const PORT = process.env.PORT || 3000

// Telegram Bot API
const BOT_TOKEN = telegramConfig.botToken
const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`

// Middleware
app.use(cors())
app.use(express.json())
app.use(express.static(path.join(__dirname, 'public')))

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ MongoDB/PostgreSQL)
let gameData = new Map()
let leaderboard = []
let nftMarketplace = []
let cryptoPrices = {
  bitcoin: 45000,
  ethereum: 3000,
  quantumToken: 0.01
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
function initializeNFTMarketplace() {
  nftMarketplace = [
    {
      id: 'quantum_crystal',
      name: '–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ö—Ä–∏—Å—Ç–∞–ª–ª',
      description: '–†–µ–¥–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª —Å –∫–≤–∞–Ω—Ç–æ–≤—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏',
      rarity: 'common',
      power: 1.1,
      icon: 'üíé',
      price: 1000,
      color: '#00FFFF'
    },
    {
      id: 'neural_network',
      name: '–ù–µ–π—Ä–æ–Ω–Ω–∞—è –°–µ—Ç—å',
      description: '–ñ–∏–≤–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
      rarity: 'rare',
      power: 1.25,
      icon: 'üß†',
      price: 5000,
      color: '#FF0080'
    },
    {
      id: 'time_loop',
      name: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –ü–µ—Ç–ª—è',
      description: '–ó–∞–≥–∞–¥–æ—á–Ω–∞—è –ø–µ—Ç–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
      rarity: 'epic',
      power: 1.5,
      icon: 'üåÄ',
      price: 15000,
      color: '#80FF00'
    },
    {
      id: 'black_hole',
      name: '–ß–µ—Ä–Ω–∞—è –î—ã—Ä–∞',
      description: '–ú–æ—â–Ω–∞—è —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ —Å –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏',
      rarity: 'legendary',
      power: 2.0,
      icon: '‚ö´',
      price: 50000,
      color: '#000000'
    },
    {
      id: 'multiverse',
      name: '–ú—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–∞—è',
      description: '–í—Å—è –º—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–∞—è –≤ –æ–¥–Ω–æ–º —Ç–æ–∫–µ–Ω–µ',
      rarity: 'mythic',
      power: 3.0,
      icon: 'üåå',
      price: 100000,
      color: '#8B00FF'
    }
  ]
}

// API Routes

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
app.get('/api/game/:userId', (req, res) => {
  const userId = req.params.userId
  const data = gameData.get(userId) || {
    totalTaps: 0,
    energy: 100,
    maxEnergy: 100,
    coins: 0,
    level: 1,
    experience: 0,
    multiplier: 1,
    corePower: 1,
    bitcoin: 0,
    ethereum: 0,
    quantumToken: 0,
    nfts: [],
    upgrades: {
      tapPower: 1,
      energyRegen: 1,
      coinMultiplier: 1,
      experienceMultiplier: 1,
      cryptoMining: 1,
      nftDrop: 1
    },
    achievements: [],
    statistics: {
      totalPlayTime: 0,
      coinsEarned: 0,
      nftsMinted: 0,
      cryptoMined: 0
    }
  }
  
  res.json({
    success: true,
    data: data,
    cryptoPrices: cryptoPrices,
    nftMarketplace: nftMarketplace
  })
})

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
app.post('/api/game/:userId/save', (req, res) => {
  const userId = req.params.userId
  const gameDataToSave = req.body
  
  gameData.set(userId, gameDataToSave)
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
  updateLeaderboard(userId, gameDataToSave)
  
  res.json({
    success: true,
    message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
  })
})

// –ü–æ–∫—É–ø–∫–∞ –∑–∞ Telegram Stars
app.post('/api/purchase/stars', async (req, res) => {
  const { itemId, price, userId } = req.body
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const order = {
      id: Date.now().toString(),
      userId: userId,
      itemId: itemId,
      price: price,
      currency: 'stars',
      status: 'pending',
      createdAt: new Date().toISOString()
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
    const telegramResponse = await axios.post(
      `${TELEGRAM_API_URL}/sendInvoice`,
      {
        chat_id: userId,
        title: `–ü–æ–∫—É–ø–∫–∞ ${itemId}`,
        description: `–ö—É–ø–∏—Ç—å ${itemId} –∑–∞ ${price} –∑–≤–µ–∑–¥`,
        payload: JSON.stringify({
          orderId: order.id,
          itemId: itemId
        }),
        provider_token: '', // –î–ª—è –∑–≤–µ–∑–¥ –Ω–µ –Ω—É–∂–µ–Ω
        currency: 'XTR', // –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è –∑–≤–µ–∑–¥
        prices: [{
          label: itemId,
          amount: price * 100 // –í –∫–æ–ø–µ–π–∫–∞—Ö
        }]
      }
    )
    
    res.json({
      success: true,
      orderId: order.id,
      invoiceId: telegramResponse.data.result.invoice_id
    })
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error)
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞'
    })
  }
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
app.get('/api/leaderboard', (req, res) => {
  res.json({
    success: true,
    leaderboard: leaderboard.slice(0, 100) // –¢–æ–ø 100
  })
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats/:userId', (req, res) => {
  const userId = req.params.userId
  const userData = gameData.get(userId)
  
  if (!userData) {
    return res.status(404).json({
      success: false,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    })
  }
  
  const stats = {
    totalTaps: userData.totalTaps,
    level: userData.level,
    coins: userData.coins,
    bitcoin: userData.bitcoin,
    nftCount: userData.nfts.length,
    playTime: userData.statistics.totalPlayTime,
    rank: leaderboard.findIndex(player => player.userId === userId) + 1
  }
  
  res.json({
    success: true,
    stats: stats
  })
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
app.get('/api/achievements/:userId', (req, res) => {
  const userId = req.params.userId
  const userData = gameData.get(userId)
  
  if (!userData) {
    return res.status(404).json({
      success: false,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    })
  }
  
  const achievements = [
    {
      id: 'first_tap',
      title: '–ü–µ—Ä–≤—ã–µ –®–∞–≥–∏',
      description: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–∞–ø',
      icon: 'üëÜ',
      unlocked: userData.totalTaps >= 1,
      reward: { coins: 100, stars: 5 }
    },
    {
      id: 'hundred_taps',
      title: '–°–æ—Ç–Ω—è',
      description: '–°–¥–µ–ª–∞–π—Ç–µ 100 —Ç–∞–ø–æ–≤',
      icon: 'üíØ',
      unlocked: userData.totalTaps >= 100,
      reward: { coins: 1000, stars: 10 }
    },
    {
      id: 'thousand_taps',
      title: '–¢—ã—Å—è—á–∞',
      description: '–°–¥–µ–ª–∞–π—Ç–µ 1000 —Ç–∞–ø–æ–≤',
      icon: 'üéØ',
      unlocked: userData.totalTaps >= 1000,
      reward: { coins: 10000, stars: 25 }
    },
    {
      id: 'level_ten',
      title: '–î–µ—Å—è—Ç–∫–∞',
      description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è',
      icon: 'üîü',
      unlocked: userData.level >= 10,
      reward: { coins: 5000, stars: 20 }
    },
    {
      id: 'crypto_miner',
      title: '–ö—Ä–∏–ø—Ç–æ–º–∞–π–Ω–µ—Ä',
      description: '–ù–∞–∫–æ–ø–∏—Ç–µ 0.001 Bitcoin',
      icon: '‚Çø',
      unlocked: userData.bitcoin >= 0.001,
      reward: { coins: 20000, stars: 50 }
    },
    {
      id: 'nft_collector',
      title: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä NFT',
      description: '–ü–æ–ª—É—á–∏—Ç–µ 5 NFT',
      icon: 'üñºÔ∏è',
      unlocked: userData.nfts.length >= 5,
      reward: { coins: 15000, stars: 30 }
    }
  ]
  
  res.json({
    success: true,
    achievements: achievements
  })
})

// Telegram Webhook
app.post('/webhook', async (req, res) => {
  const update = req.body
  
  try {
    if (update.message) {
      const message = update.message
      const chatId = message.chat.id
      const text = message.text
      
      if (text === '/start') {
        const keyboard = {
          inline_keyboard: [[
            {
              text: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
              web_app: { url: telegramConfig.webAppUrl }
            }
          ]]
        }
        
        await sendMessage(chatId, telegramConfig.welcomeMessage, keyboard)
      }
      
      if (text === '/help') {
        const helpMessage = `
‚ùì –ü–æ–º–æ—â—å –ø–æ Quantum Nexus:

üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/game - –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É
/shop - –ú–∞–≥–∞–∑–∏–Ω –∑–∞ –∑–≤–µ–∑–¥—ã
/nft - NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è
/social - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
/ar - AR —Ä–µ–∂–∏–º
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/leaderboard - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –¢–∞–ø–∞–π—Ç–µ –ø–æ –∫–≤–∞–Ω—Ç–æ–≤–æ–º—É —è–¥—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏
‚Ä¢ –°–æ–±–∏—Ä–∞–π—Ç–µ NFT –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥–∏–ª—å–¥–∏—è–º –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @quantum_nexus_support
        `
        
        await sendMessage(chatId, helpMessage)
      }
    }
    
    if (update.pre_checkout_query) {
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      await axios.post(
        `${TELEGRAM_API_URL}/answerPreCheckoutQuery`,
        {
          pre_checkout_query_id: update.pre_checkout_query.id,
          ok: true
        }
      )
    }
    
    if (update.message && update.message.successful_payment) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
      const payment = update.message.successful_payment
      const orderData = JSON.parse(payment.invoice_payload)
      
      // –í—ã–¥–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await giveItemToUser(orderData.userId, orderData.itemId)
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await sendMessage(update.message.chat.id, 
        'üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!'
      )
    }
    
    res.json({ ok: true })
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error)
    res.status(500).json({ ok: false })
  }
})

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text, keyboard = null) {
  try {
    const response = await axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
      chat_id: chatId,
      text: text,
      reply_markup: keyboard,
      parse_mode: 'HTML'
    })
    return response.data
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞
async function giveItemToUser(userId, itemId) {
  const userData = gameData.get(userId)
  if (userData) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    userData.nfts.push({
      id: itemId,
      receivedAt: new Date().toISOString()
    })
    
    gameData.set(userId, userData)
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
function updateLeaderboard(userId, userData) {
  const existingIndex = leaderboard.findIndex(player => player.userId === userId)
  const playerData = {
    userId: userId,
    username: userData.username || '–ò–≥—Ä–æ–∫',
    level: userData.level,
    totalTaps: userData.totalTaps,
    coins: userData.coins,
    bitcoin: userData.bitcoin,
    nftCount: userData.nfts.length,
    lastActive: new Date().toISOString()
  }
  
  if (existingIndex >= 0) {
    leaderboard[existingIndex] = playerData
  } else {
    leaderboard.push(playerData)
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–∞–ø–æ–≤
  leaderboard.sort((a, b) => {
    if (a.level !== b.level) {
      return b.level - a.level
    }
    return b.totalTaps - a.totalTaps
  })
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
function updateCryptoPrices() {
  setInterval(() => {
    cryptoPrices.bitcoin *= (0.95 + Math.random() * 0.1) // ¬±5% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    cryptoPrices.ethereum *= (0.95 + Math.random() * 0.1)
    cryptoPrices.quantumToken *= (0.9 + Math.random() * 0.2) // ¬±10% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ü–µ–Ω
    cryptoPrices.bitcoin = Math.max(10000, Math.min(100000, cryptoPrices.bitcoin))
    cryptoPrices.ethereum = Math.max(1000, Math.min(10000, cryptoPrices.ethereum))
    cryptoPrices.quantumToken = Math.max(0.001, Math.min(1, cryptoPrices.quantumToken))
  }, 30000) // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initializeNFTMarketplace()
updateCryptoPrices()

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function setupBotCommands() {
  try {
    await axios.post(`${TELEGRAM_API_URL}/setMyCommands`, {
      commands: telegramConfig.botCommands
    })
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥:', error)
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ Quantum Nexus Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üì± Telegram Bot Token: ${BOT_TOKEN.substring(0, 10)}...`)
  console.log(`üåê WebApp –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${telegramConfig.webAppUrl}`)
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
  await setupBotCommands()
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason)
})

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error)
  process.exit(1)
})